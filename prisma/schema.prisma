// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("APP_DATABASE_URL")
}

// [Accounts]

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  firstName String
  lastName  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  INTERNAL
  EXTERNAL
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  type     UserType

  phoneNumber String
  firstName   String
  lastName    String?

  // ktmId is optional for external user
  ktmUid String?

  Renting     Renting[]
  Transaction Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// [Locker]
model Locker {
  id        Int    @id @default(autoincrement())
  machineId String @unique // unique identifier of the locker machine

  name        String
  location    String
  description String @db.Text

  Rooms Rooms[]

  lastSeenAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// [Locker Rooms] - buat sekarang MAX 4 rooms limitasi machine nya
model Rooms {
  id Int @id @default(autoincrement())

  doorId Int

  locker   Locker @relation(fields: [lockerId], references: [id], onDelete: Cascade)
  lockerId Int

  name String
  size String

  Renting Renting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// [Locker Renting]
enum RentStatus {
  ACTIVE
  DONE
  OVERDUE
}

model Renting {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  room   Rooms @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int

  status RentStatus

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int

  startTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// [Transaction]
enum TransactionType {
  IN
  OUT
}

model Transaction {
  id            Int    @id @default(autoincrement())
  transactionID String @unique

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  amount Int // in credits (1 credit = 1000 rupiah)

  type TransactionType

  validatedAt DateTime?

  Renting Renting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NFCQueue {
  id Int @id @default(autoincrement())

  machineId String
  ktmUid    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
